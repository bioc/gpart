// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// VCFtogeno
IntegerMatrix VCFtogeno(CharacterMatrix vcf);
RcppExport SEXP _gpart_VCFtogeno(SEXP vcfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix >::type vcf(vcfSEXP);
    rcpp_result_gen = Rcpp::wrap(VCFtogeno(vcf));
    return rcpp_result_gen;
END_RCPP
}
// pairCubeX
NumericVector pairCubeX(IntegerVector b1, IntegerVector b2);
RcppExport SEXP _gpart_pairCubeX(SEXP b1SEXP, SEXP b2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type b2(b2SEXP);
    rcpp_result_gen = Rcpp::wrap(pairCubeX(b1, b2));
    return rcpp_result_gen;
END_RCPP
}
// matCubeX
NumericMatrix matCubeX(IntegerMatrix geno);
RcppExport SEXP _gpart_matCubeX(SEXP genoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type geno(genoSEXP);
    rcpp_result_gen = Rcpp::wrap(matCubeX(geno));
    return rcpp_result_gen;
END_RCPP
}
// matCubeX2
NumericMatrix matCubeX2(IntegerMatrix geno1, IntegerMatrix geno2);
RcppExport SEXP _gpart_matCubeX2(SEXP geno1SEXP, SEXP geno2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type geno1(geno1SEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type geno2(geno2SEXP);
    rcpp_result_gen = Rcpp::wrap(matCubeX2(geno1, geno2));
    return rcpp_result_gen;
END_RCPP
}
// estiD
int estiD(double pA, double pB, int n11, int n12, int n21, int n22, int n1212);
RcppExport SEXP _gpart_estiD(SEXP pASEXP, SEXP pBSEXP, SEXP n11SEXP, SEXP n12SEXP, SEXP n21SEXP, SEXP n22SEXP, SEXP n1212SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type pA(pASEXP);
    Rcpp::traits::input_parameter< double >::type pB(pBSEXP);
    Rcpp::traits::input_parameter< int >::type n11(n11SEXP);
    Rcpp::traits::input_parameter< int >::type n12(n12SEXP);
    Rcpp::traits::input_parameter< int >::type n21(n21SEXP);
    Rcpp::traits::input_parameter< int >::type n22(n22SEXP);
    Rcpp::traits::input_parameter< int >::type n1212(n1212SEXP);
    rcpp_result_gen = Rcpp::wrap(estiD(pA, pB, n11, n12, n21, n22, n1212));
    return rcpp_result_gen;
END_RCPP
}
// CIDp
NumericVector CIDp(IntegerVector b1, IntegerVector b2);
RcppExport SEXP _gpart_CIDp(SEXP b1SEXP, SEXP b2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type b2(b2SEXP);
    rcpp_result_gen = Rcpp::wrap(CIDp(b1, b2));
    return rcpp_result_gen;
END_RCPP
}
// genoDp
NumericMatrix genoDp(IntegerMatrix geno, bool strLD, double lower, double upper);
RcppExport SEXP _gpart_genoDp(SEXP genoSEXP, SEXP strLDSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type geno(genoSEXP);
    Rcpp::traits::input_parameter< bool >::type strLD(strLDSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(genoDp(geno, strLD, lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// genoDp2
NumericMatrix genoDp2(IntegerMatrix geno1, IntegerMatrix geno2, bool strLD, double lower, double upper);
RcppExport SEXP _gpart_genoDp2(SEXP geno1SEXP, SEXP geno2SEXP, SEXP strLDSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type geno1(geno1SEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type geno2(geno2SEXP);
    Rcpp::traits::input_parameter< bool >::type strLD(strLDSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(genoDp2(geno1, geno2, strLD, lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// genoCubeDp
NumericMatrix genoCubeDp(IntegerMatrix geno);
RcppExport SEXP _gpart_genoCubeDp(SEXP genoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type geno(genoSEXP);
    rcpp_result_gen = Rcpp::wrap(genoCubeDp(geno));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gpart_VCFtogeno", (DL_FUNC) &_gpart_VCFtogeno, 1},
    {"_gpart_pairCubeX", (DL_FUNC) &_gpart_pairCubeX, 2},
    {"_gpart_matCubeX", (DL_FUNC) &_gpart_matCubeX, 1},
    {"_gpart_matCubeX2", (DL_FUNC) &_gpart_matCubeX2, 2},
    {"_gpart_estiD", (DL_FUNC) &_gpart_estiD, 7},
    {"_gpart_CIDp", (DL_FUNC) &_gpart_CIDp, 2},
    {"_gpart_genoDp", (DL_FUNC) &_gpart_genoDp, 4},
    {"_gpart_genoDp2", (DL_FUNC) &_gpart_genoDp2, 5},
    {"_gpart_genoCubeDp", (DL_FUNC) &_gpart_genoCubeDp, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_gpart(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
